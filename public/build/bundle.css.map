{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Notifications.svelte",
    "Home.svelte"
  ],
  "sourcesContent": [
    "{#if actions.length}\n  <div class=\"notifications alert alert-info\" role=\"alert\">\n    {#each actions as action}\n    {action}\n    {/each}\n  </div>\n{/if}\n\n<script>\n  export let actions;\n</script>\n\n<style>\n  .notifications {\n    width: 80%;\n    text-align: center;\n    margin-left: auto;\n    margin-right: auto\n  }\n</style>\n",
    "<Notifications {actions} />\n\n{#await promise}\n  <p>...waiting</p>\n  {:then}\n    {#each Object.keys(configurations.views) as id }\n    \n      <div class=\"container col-sm-10 col-md-6 pr-4 pl-4\">\n        <Link to=\"/edit/{id}\">\n          <h5>{configurations.views[id].name}</h5>\n          <div class=\"card img-fluid\">\n            <img class=\"card-img-top\" src=\"images/{configurations.views[id].background}\" alt=\"view background\">\n\n            <div class=\"card-img-overlay\">\n              <img src=\"images/{configurations.views[id].theme}.png\" class=\"card-img-top\" alt=\"...\">\n            </div>\n          </div>\n        </Link>\n        <div class=\"card-body text-center\">\n\n          <label class=\"switch d-inline-block float-left\">\n            <input on:change=\"{ToggleEnabled(id)}\" type=\"checkbox\" checked={configurations.views[id].enabled ? \"checked\" : ''}>\n            <span class=\"slider round\"></span>\n          </label>\n\n            {#each configurations.views[id].gauges as gauge}\n            <span class=\"text-center d-inline-block mr-2\">{gauge.pid}</span>\n            {/each}\n\n        </div>\n      </div>\n    {/each}\n\n    <div class=\"text-center container col-sm-10 col-md-6 pr-4 pl-4\">\n      <Link to='/edit/new'>\n        <span class=\"plus bg-primary\">+</span>\n      </Link>\n    </div>\n\n    {:catch error}\n    <p style=\"color: red\">{error.message}</p>  \n{/await}\n\n<script>\n  import Notifications from '../components/Notifications.svelte';\n  import { Link } from \"svelte-routing\";\n\n  export let actions = [];\n\n  let configurations = {};\n  async function getConfigs() {\n    const res = await fetch(\"/api/config\", {\n        method : \"get\",\n      });\n      const data = await res.json();\n\n      if (res.ok) {\n        configurations = data;\n        return data;\n      } else {\n        throw new Error(data);\n      }\n    }\n    let promise = getConfigs();\n\n  function ToggleEnabled(id) {\n    fetch(\"/api/toggle_enabled\", {\n        method : \"post\",\n        body   : JSON.stringify({id: id})\n    }).then(d => d.json())\n    .then(d => {\n      configurations.views = d.views;\n      actions = [d.message];\n    });\n  }\n</script>\n\n\n<style>\n  .plus {\n    cursor: pointer;\n    display: inline-block;\n    vertical-align: top;\n    color: white;\n    width: 30px;\n    height: 30px;\n    font: 30px/1 Arial,sans-serif;\n    text-align: center;\n    border-radius: 50%;\n  }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAaE,cAAc,cAAC,CAAC,AACd,KAAK,CAAE,GAAG,CACV,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI;EACpB,CAAC;AC6DD,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,YAAY,CACrB,cAAc,CAAE,GAAG,CACnB,KAAK,CAAE,KAAK,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAC7B,UAAU,CAAE,MAAM,CAClB,aAAa,CAAE,GAAG,AACpB,CAAC"
}