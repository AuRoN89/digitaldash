import './Notifications.svelte.css.proxy.js';
/* src/components/Notifications.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	add_transform,
	append,
	attr,
	check_outros,
	children,
	claim_element,
	claim_space,
	claim_text,
	component_subscribe,
	create_animation,
	create_out_transition,
	detach,
	element,
	empty,
	fix_and_outro_and_destroy_block,
	fix_position,
	group_outros,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	set_store_value,
	space,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from "../_snowpack/pkg/svelte/internal.js";

import { session } from "../_app/assets/runtime/app/stores.js";
import { flip } from "../_snowpack/pkg/svelte/animate.js";
import { fade, fly } from "../_snowpack/pkg/svelte/transition.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (1:0) {#if $session.actions && $session.actions.length}
function create_if_block(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value = /*$session*/ ctx[0].actions;
	const get_key = ctx => /*action*/ ctx[3].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, id: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "notifications svelte-mlqs8o");
			attr(div, "id", "notifications");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*$session, remove*/ 3) {
				each_value = /*$session*/ ctx[0].actions;
				group_outros();
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

// (3:4) {#each $session.actions as action(action.id)}
function create_each_block(key_1, ctx) {
	let div;
	let t0_value = /*action*/ ctx[3].msg + "";
	let t0;
	let t1;
	let button;
	let span;
	let t2;
	let t3;
	let div_class_value;
	let div_outro;
	let rect;
	let stop_animation = noop;
	let current;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[2](/*action*/ ctx[3]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			button = element("button");
			span = element("span");
			t2 = text("×");
			t3 = space();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true, role: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { "aria-hidden": true });
			var span_nodes = children(span);
			t2 = claim_text(span_nodes, "×");
			span_nodes.forEach(detach);
			button_nodes.forEach(detach);
			t3 = claim_space(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(span, "aria-hidden", "true");
			attr(button, "type", "button");
			attr(button, "class", "float-right close");
			attr(div, "class", div_class_value = "text-center notification alert " + /*action*/ ctx[3].theme + " svelte-mlqs8o");
			attr(div, "role", "alert");
			this.first = div;
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, button);
			append(button, span);
			append(span, t2);
			append(div, t3);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*$session*/ 1) && t0_value !== (t0_value = /*action*/ ctx[3].msg + "")) set_data(t0, t0_value);

			if (!current || dirty & /*$session*/ 1 && div_class_value !== (div_class_value = "text-center notification alert " + /*action*/ ctx[3].theme + " svelte-mlqs8o")) {
				attr(div, "class", div_class_value);
			}
		},
		r() {
			rect = div.getBoundingClientRect();
		},
		f() {
			fix_position(div);
			stop_animation();
			add_transform(div, rect);
		},
		a() {
			stop_animation();
			stop_animation = create_animation(div, rect, flip, { duration: 200 });
		},
		i(local) {
			if (current) return;
			if (div_outro) div_outro.end(1);
			current = true;
		},
		o(local) {
			div_outro = create_out_transition(div, fade, {});
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$session*/ ctx[0].actions && /*$session*/ ctx[0].actions.length && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$session*/ ctx[0].actions && /*$session*/ ctx[0].actions.length) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$session*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $session;
	component_subscribe($$self, session, $$value => $$invalidate(0, $session = $$value));

	function remove(id) {
		set_store_value(session, $session.actions = $session.actions.filter(action => action.id != id), $session);
	}

	const click_handler = action => remove(action.id);

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$session*/ 1) {
			$: {
				if ($session.actions.length) {
					set_store_value(session, $session.count = $session.count + 1, $session);
				}
			}
		}
	};

	return [$session, remove, click_handler];
}

class Notifications extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Notifications;
//# sourceMappingURL=Notifications.svelte.js.map
