/* src/components/Nav.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space,
	text,
	toggle_class
} from "../_snowpack/pkg/svelte/internal.js";

function create_fragment(ctx) {
	let div3;
	let div2;
	let nav;
	let div1;
	let a0;
	let t0;
	let t1;
	let button;
	let span;
	let t2;
	let div0;
	let ul;
	let li0;
	let a1;
	let t3;
	let t4;
	let li1;
	let a2;
	let t5;
	let t6;
	let li2;
	let a3;
	let t7;

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			nav = element("nav");
			div1 = element("div");
			a0 = element("a");
			t0 = text("KE");
			t1 = space();
			button = element("button");
			span = element("span");
			t2 = space();
			div0 = element("div");
			ul = element("ul");
			li0 = element("li");
			a1 = element("a");
			t3 = text("Home");
			t4 = space();
			li1 = element("li");
			a2 = element("a");
			t5 = text("Settings");
			t6 = space();
			li2 = element("li");
			a3 = element("a");
			t7 = text("Advanced");
			this.h();
		},
		l(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			nav = claim_element(div2_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			div1 = claim_element(nav_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a0 = claim_element(div1_nodes, "A", { class: true, href: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "KE");
			a0_nodes.forEach(detach);
			t1 = claim_space(div1_nodes);

			button = claim_element(div1_nodes, "BUTTON", {
				class: true,
				type: true,
				"data-toggle": true,
				"data-target": true,
				"aria-controls": true,
				"aria-expanded": true,
				"aria-label": true
			});

			var button_nodes = children(button);
			span = claim_element(button_nodes, "SPAN", { class: true });
			children(span).forEach(detach);
			button_nodes.forEach(detach);
			t2 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true, id: true });
			var div0_nodes = children(div0);
			ul = claim_element(div0_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			a1 = claim_element(li0_nodes, "A", { class: true, href: true });
			var a1_nodes = children(a1);
			t3 = claim_text(a1_nodes, "Home");
			a1_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t4 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			a2 = claim_element(li1_nodes, "A", { class: true, href: true });
			var a2_nodes = children(a2);
			t5 = claim_text(a2_nodes, "Settings");
			a2_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t6 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			a3 = claim_element(li2_nodes, "A", { class: true, href: true });
			var a3_nodes = children(a3);
			t7 = claim_text(a3_nodes, "Advanced");
			a3_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			nav_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a0, "class", "navbar-brand");
			attr(a0, "href", "/");
			attr(span, "class", "navbar-toggler-icon");
			attr(button, "class", "navbar-toggler");
			attr(button, "type", "button");
			attr(button, "data-toggle", "collapse");
			attr(button, "data-target", "#navbarCollapse");
			attr(button, "aria-controls", "navbarCollapse");
			attr(button, "aria-expanded", "false");
			attr(button, "aria-label", "Toggle navigation");
			attr(a1, "class", "nav-link");
			attr(a1, "href", "/");
			toggle_class(a1, "active", !/*segment*/ ctx[0]);
			attr(li0, "class", "nav-item");
			attr(a2, "class", "nav-link");
			attr(a2, "href", "/settings");
			toggle_class(a2, "active", /*segment*/ ctx[0] === "settings");
			attr(li1, "class", "nav-item");
			attr(a3, "class", "nav-link");
			attr(a3, "href", "/advanced");
			toggle_class(a3, "active", /*segment*/ ctx[0] === "advanced");
			attr(li2, "class", "nav-item");
			attr(ul, "class", "navbar-nav nav mr-auto mb-2 mb-md-0");
			attr(div0, "class", "collapse navbar-collapse");
			attr(div0, "id", "navbarCollapse");
			attr(div1, "class", "container-fluid");
			attr(nav, "class", "navbar navbar-expand-md navbar-dark fixed-top bg-dark");
			attr(div2, "class", "nav-scroller py-1 mb-2");
			attr(div3, "class", "m-4");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, nav);
			append(nav, div1);
			append(div1, a0);
			append(a0, t0);
			append(div1, t1);
			append(div1, button);
			append(button, span);
			append(div1, t2);
			append(div1, div0);
			append(div0, ul);
			append(ul, li0);
			append(li0, a1);
			append(a1, t3);
			append(ul, t4);
			append(ul, li1);
			append(li1, a2);
			append(a2, t5);
			append(ul, t6);
			append(ul, li2);
			append(li2, a3);
			append(a3, t7);
		},
		p(ctx, [dirty]) {
			if (dirty & /*segment*/ 1) {
				toggle_class(a1, "active", !/*segment*/ ctx[0]);
			}

			if (dirty & /*segment*/ 1) {
				toggle_class(a2, "active", /*segment*/ ctx[0] === "settings");
			}

			if (dirty & /*segment*/ 1) {
				toggle_class(a3, "active", /*segment*/ ctx[0] === "advanced");
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div3);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { segment } = $$props;

	$$self.$$set = $$props => {
		if ("segment" in $$props) $$invalidate(0, segment = $$props.segment);
	};

	return [segment];
}

class Nav extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { segment: 0 });
	}
}

export default Nav;
//# sourceMappingURL=Nav.svelte.js.map
