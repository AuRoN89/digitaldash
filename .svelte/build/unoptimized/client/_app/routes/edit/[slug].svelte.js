import './[slug].svelte.css.proxy.js';
/* src/routes/edit/[slug].svelte generated by Svelte v3.32.0 */
import {
	SvelteComponent,
	action_destroyer,
	add_render_callback,
	append,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	component_subscribe,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	select_option,
	select_value,
	set_data,
	set_input_value,
	set_store_value,
	space,
	text,
	to_number,
	transition_in,
	transition_out
} from "../../../_snowpack/pkg/svelte/internal.js";

import { session } from "../../assets/runtime/app/stores.js";
import Slider from "../../../_components/Slider.svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[31] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[37] = list[i];
	child_ctx[38] = list;
	child_ctx[39] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[31] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[44] = list[i];
	child_ctx[45] = list;
	child_ctx[39] = i;
	return child_ctx;
}

function get_each_context_6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[34] = list[i];
	return child_ctx;
}

function get_each_context_7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[48] = list[i];
	return child_ctx;
}

function get_each_context_8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[51] = list[i];
	return child_ctx;
}

// (136:2) {#if view}
function create_if_block(ctx) {
	let div19;
	let div18;
	let h40;
	let t0;
	let t1;
	let t2;
	let form;
	let input0;
	let t3;
	let h41;
	let t4;
	let t5;
	let hr0;
	let t6;
	let div6;
	let div5;
	let div0;
	let label0;
	let t7;
	let t8;
	let input1;
	let t9;
	let div1;
	let label1;
	let t10;
	let t11;
	let select0;
	let option0;
	let t12;
	let t13;
	let div2;
	let label2;
	let t14;
	let t15;
	let select1;
	let option1;
	let t16;
	let t17;
	let div4;
	let label3;
	let t18;
	let t19;
	let div3;
	let t20;
	let h42;
	let t21;
	let t22;
	let hr1;
	let t23;
	let div8;
	let t24;
	let div7;
	let button0;
	let t25;
	let t26;
	let h43;
	let t27;
	let t28;
	let hr2;
	let t29;
	let div17;
	let div10;
	let div9;
	let switch_instance;
	let t30;
	let div16;
	let div11;
	let label4;
	let t31;
	let t32;
	let select2;
	let option2;
	let t33;
	let select2_disabled_value;
	let select2_name_value;
	let pidChange_action;
	let t34;
	let div12;
	let label5;
	let t35;
	let t36;
	let select3;
	let option3;
	let t37;
	let select3_disabled_value;
	let select3_value_value;
	let t38;
	let div13;
	let label6;
	let t39;
	let t40;
	let input2;
	let input2_disabled_value;
	let t41;
	let div14;
	let label7;
	let t42;
	let t43;
	let select4;
	let option4;
	let t44;
	let select4_disabled_value;
	let t45;
	let div15;
	let label8;
	let t46;
	let t47;
	let input3;
	let input3_disabled_value;
	let t48;
	let hr3;
	let t49;
	let button1;
	let t50;
	let current;
	let mounted;
	let dispose;
	let each_value_8 = ["banner1.jpg", "bg.jpg", "BlackBackground.png", "CarbonFiber.png"];
	let each_blocks_5 = [];

	for (let i = 0; i < 4; i += 1) {
		each_blocks_5[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
	}

	let each_value_7 = ["Stock"];
	let each_blocks_4 = [];

	for (let i = 0; i < 1; i += 1) {
		each_blocks_4[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
	}

	let each_value_5 = Array(3);
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks_3[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	let each_value_2 = /*view*/ ctx[1].alerts;
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	var switch_value = Slider;

	function switch_props(ctx) {
		return {
			props: {
				callback: /*toggleDynamic*/ ctx[8],
				callbackArgs: null,
				checked: /*view*/ ctx[1].dynamic.enabled
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	let each_value_1 = /*pids*/ ctx[3];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = ["=", ">", "<", ">=", "<="];
	let each_blocks = [];

	for (let i = 0; i < 5; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div19 = element("div");
			div18 = element("div");
			h40 = element("h4");
			t0 = text("Editing view #");
			t1 = text(/*id*/ ctx[0]);
			t2 = space();
			form = element("form");
			input0 = element("input");
			t3 = space();
			h41 = element("h4");
			t4 = text("Basics");
			t5 = space();
			hr0 = element("hr");
			t6 = space();
			div6 = element("div");
			div5 = element("div");
			div0 = element("div");
			label0 = element("label");
			t7 = text("View name");
			t8 = space();
			input1 = element("input");
			t9 = space();
			div1 = element("div");
			label1 = element("label");
			t10 = text("Background");
			t11 = space();
			select0 = element("select");
			option0 = element("option");
			t12 = text("-");

			for (let i = 0; i < 4; i += 1) {
				each_blocks_5[i].c();
			}

			t13 = space();
			div2 = element("div");
			label2 = element("label");
			t14 = text("Theme");
			t15 = space();
			select1 = element("select");
			option1 = element("option");
			t16 = text("-");

			for (let i = 0; i < 1; i += 1) {
				each_blocks_4[i].c();
			}

			t17 = space();
			div4 = element("div");
			label3 = element("label");
			t18 = text("Vehicle Parameters");
			t19 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t20 = space();
			h42 = element("h4");
			t21 = text("Alerts");
			t22 = space();
			hr1 = element("hr");
			t23 = space();
			div8 = element("div");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t24 = space();
			div7 = element("div");
			button0 = element("button");
			t25 = text("New alert");
			t26 = space();
			h43 = element("h4");
			t27 = text("Dynamic");
			t28 = space();
			hr2 = element("hr");
			t29 = space();
			div17 = element("div");
			div10 = element("div");
			div9 = element("div");
			if (switch_instance) create_component(switch_instance.$$.fragment);
			t30 = space();
			div16 = element("div");
			div11 = element("div");
			label4 = element("label");
			t31 = text("PID");
			t32 = space();
			select2 = element("select");
			option2 = element("option");
			t33 = text("-");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t34 = space();
			div12 = element("div");
			label5 = element("label");
			t35 = text("Unit");
			t36 = space();
			select3 = element("select");
			option3 = element("option");
			t37 = text("-");
			t38 = space();
			div13 = element("div");
			label6 = element("label");
			t39 = text("Value");
			t40 = space();
			input2 = element("input");
			t41 = space();
			div14 = element("div");
			label7 = element("label");
			t42 = text("OP");
			t43 = space();
			select4 = element("select");
			option4 = element("option");
			t44 = text("-");

			for (let i = 0; i < 5; i += 1) {
				each_blocks[i].c();
			}

			t45 = space();
			div15 = element("div");
			label8 = element("label");
			t46 = text("Priority");
			t47 = space();
			input3 = element("input");
			t48 = space();
			hr3 = element("hr");
			t49 = space();
			button1 = element("button");
			t50 = text("Update");
			this.h();
		},
		l(nodes) {
			div19 = claim_element(nodes, "DIV", { id: true, class: true });
			var div19_nodes = children(div19);
			div18 = claim_element(div19_nodes, "DIV", { class: true });
			var div18_nodes = children(div18);
			h40 = claim_element(div18_nodes, "H4", { class: true });
			var h40_nodes = children(h40);
			t0 = claim_text(h40_nodes, "Editing view #");
			t1 = claim_text(h40_nodes, /*id*/ ctx[0]);
			h40_nodes.forEach(detach);
			t2 = claim_space(div18_nodes);
			form = claim_element(div18_nodes, "FORM", { class: true });
			var form_nodes = children(form);
			input0 = claim_element(form_nodes, "INPUT", { type: true, value: true, name: true });
			t3 = claim_space(form_nodes);
			h41 = claim_element(form_nodes, "H4", {});
			var h41_nodes = children(h41);
			t4 = claim_text(h41_nodes, "Basics");
			h41_nodes.forEach(detach);
			t5 = claim_space(form_nodes);
			hr0 = claim_element(form_nodes, "HR", {});
			t6 = claim_space(form_nodes);
			div6 = claim_element(form_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div0 = claim_element(div5_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			label0 = claim_element(div0_nodes, "LABEL", { for: true });
			var label0_nodes = children(label0);
			t7 = claim_text(label0_nodes, "View name");
			label0_nodes.forEach(detach);
			t8 = claim_space(div0_nodes);

			input1 = claim_element(div0_nodes, "INPUT", {
				name: true,
				type: true,
				class: true,
				id: true,
				placeholder: true,
				required: true
			});

			div0_nodes.forEach(detach);
			t9 = claim_space(div5_nodes);
			div1 = claim_element(div5_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			label1 = claim_element(div1_nodes, "LABEL", { for: true });
			var label1_nodes = children(label1);
			t10 = claim_text(label1_nodes, "Background");
			label1_nodes.forEach(detach);
			t11 = claim_space(div1_nodes);

			select0 = claim_element(div1_nodes, "SELECT", {
				name: true,
				class: true,
				id: true,
				required: true
			});

			var select0_nodes = children(select0);
			option0 = claim_element(select0_nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t12 = claim_text(option0_nodes, "-");
			option0_nodes.forEach(detach);

			for (let i = 0; i < 4; i += 1) {
				each_blocks_5[i].l(select0_nodes);
			}

			select0_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t13 = claim_space(div5_nodes);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			label2 = claim_element(div2_nodes, "LABEL", { for: true });
			var label2_nodes = children(label2);
			t14 = claim_text(label2_nodes, "Theme");
			label2_nodes.forEach(detach);
			t15 = claim_space(div2_nodes);

			select1 = claim_element(div2_nodes, "SELECT", {
				name: true,
				class: true,
				id: true,
				required: true
			});

			var select1_nodes = children(select1);
			option1 = claim_element(select1_nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t16 = claim_text(option1_nodes, "-");
			option1_nodes.forEach(detach);

			for (let i = 0; i < 1; i += 1) {
				each_blocks_4[i].l(select1_nodes);
			}

			select1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t17 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			label3 = claim_element(div4_nodes, "LABEL", { for: true });
			var label3_nodes = children(label3);
			t18 = claim_text(label3_nodes, "Vehicle Parameters");
			label3_nodes.forEach(detach);
			t19 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].l(div3_nodes);
			}

			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			t20 = claim_space(form_nodes);
			h42 = claim_element(form_nodes, "H4", {});
			var h42_nodes = children(h42);
			t21 = claim_text(h42_nodes, "Alerts");
			h42_nodes.forEach(detach);
			t22 = claim_space(form_nodes);
			hr1 = claim_element(form_nodes, "HR", {});
			t23 = claim_space(form_nodes);
			div8 = claim_element(form_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].l(div8_nodes);
			}

			t24 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			button0 = claim_element(div7_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t25 = claim_text(button0_nodes, "New alert");
			button0_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			t26 = claim_space(form_nodes);
			h43 = claim_element(form_nodes, "H4", {});
			var h43_nodes = children(h43);
			t27 = claim_text(h43_nodes, "Dynamic");
			h43_nodes.forEach(detach);
			t28 = claim_space(form_nodes);
			hr2 = claim_element(form_nodes, "HR", {});
			t29 = claim_space(form_nodes);
			div17 = claim_element(form_nodes, "DIV", { class: true });
			var div17_nodes = children(div17);
			div10 = claim_element(div17_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			div9 = claim_element(div10_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			if (switch_instance) claim_component(switch_instance.$$.fragment, div9_nodes);
			div9_nodes.forEach(detach);
			div10_nodes.forEach(detach);
			t30 = claim_space(div17_nodes);
			div16 = claim_element(div17_nodes, "DIV", { class: true });
			var div16_nodes = children(div16);
			div11 = claim_element(div16_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);
			label4 = claim_element(div11_nodes, "LABEL", { for: true });
			var label4_nodes = children(label4);
			t31 = claim_text(label4_nodes, "PID");
			label4_nodes.forEach(detach);
			t32 = claim_space(div11_nodes);

			select2 = claim_element(div11_nodes, "SELECT", {
				disabled: true,
				name: true,
				class: true,
				id: true,
				required: true
			});

			var select2_nodes = children(select2);
			option2 = claim_element(select2_nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t33 = claim_text(option2_nodes, "-");
			option2_nodes.forEach(detach);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(select2_nodes);
			}

			select2_nodes.forEach(detach);
			div11_nodes.forEach(detach);
			t34 = claim_space(div16_nodes);
			div12 = claim_element(div16_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			label5 = claim_element(div12_nodes, "LABEL", { class: true, for: true });
			var label5_nodes = children(label5);
			t35 = claim_text(label5_nodes, "Unit");
			label5_nodes.forEach(detach);
			t36 = claim_space(div12_nodes);

			select3 = claim_element(div12_nodes, "SELECT", {
				name: true,
				disabled: true,
				value: true,
				class: true,
				required: true
			});

			var select3_nodes = children(select3);
			option3 = claim_element(select3_nodes, "OPTION", { value: true });
			var option3_nodes = children(option3);
			t37 = claim_text(option3_nodes, "-");
			option3_nodes.forEach(detach);
			select3_nodes.forEach(detach);
			div12_nodes.forEach(detach);
			t38 = claim_space(div16_nodes);
			div13 = claim_element(div16_nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			label6 = claim_element(div13_nodes, "LABEL", { for: true });
			var label6_nodes = children(label6);
			t39 = claim_text(label6_nodes, "Value");
			label6_nodes.forEach(detach);
			t40 = claim_space(div13_nodes);

			input2 = claim_element(div13_nodes, "INPUT", {
				disabled: true,
				class: true,
				type: true,
				name: true
			});

			div13_nodes.forEach(detach);
			t41 = claim_space(div16_nodes);
			div14 = claim_element(div16_nodes, "DIV", { class: true });
			var div14_nodes = children(div14);
			label7 = claim_element(div14_nodes, "LABEL", { for: true });
			var label7_nodes = children(label7);
			t42 = claim_text(label7_nodes, "OP");
			label7_nodes.forEach(detach);
			t43 = claim_space(div14_nodes);
			select4 = claim_element(div14_nodes, "SELECT", { name: true, disabled: true, class: true });
			var select4_nodes = children(select4);
			option4 = claim_element(select4_nodes, "OPTION", { value: true });
			var option4_nodes = children(option4);
			t44 = claim_text(option4_nodes, "-");
			option4_nodes.forEach(detach);

			for (let i = 0; i < 5; i += 1) {
				each_blocks[i].l(select4_nodes);
			}

			select4_nodes.forEach(detach);
			div14_nodes.forEach(detach);
			t45 = claim_space(div16_nodes);
			div15 = claim_element(div16_nodes, "DIV", { class: true });
			var div15_nodes = children(div15);
			label8 = claim_element(div15_nodes, "LABEL", { for: true });
			var label8_nodes = children(label8);
			t46 = claim_text(label8_nodes, "Priority");
			label8_nodes.forEach(detach);
			t47 = claim_space(div15_nodes);

			input3 = claim_element(div15_nodes, "INPUT", {
				disabled: true,
				class: true,
				type: true,
				name: true
			});

			div15_nodes.forEach(detach);
			div16_nodes.forEach(detach);
			div17_nodes.forEach(detach);
			t48 = claim_space(form_nodes);
			hr3 = claim_element(form_nodes, "HR", { class: true });
			t49 = claim_space(form_nodes);
			button1 = claim_element(form_nodes, "BUTTON", { class: true, type: true });
			var button1_nodes = children(button1);
			t50 = claim_text(button1_nodes, "Update");
			button1_nodes.forEach(detach);
			form_nodes.forEach(detach);
			div18_nodes.forEach(detach);
			div19_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h40, "class", "mb-3");
			attr(input0, "type", "hidden");
			input0.value = "<%$id%>";
			attr(input0, "name", "id");
			attr(label0, "for", "name");
			attr(input1, "name", "name");
			attr(input1, "type", "text");
			attr(input1, "class", "form-control");
			attr(input1, "id", "name");
			attr(input1, "placeholder", "");
			input1.required = true;
			attr(div0, "class", "col-12");
			attr(label1, "for", "background");
			option0.__value = "";
			option0.value = option0.__value;
			attr(select0, "name", "background");
			attr(select0, "class", "custom-select form-control d-block w-100");
			attr(select0, "id", "country");
			select0.required = true;
			if (/*view*/ ctx[1].background === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[11].call(select0));
			attr(div1, "class", "col-6");
			attr(label2, "for", "theme");
			option1.__value = "";
			option1.value = option1.__value;
			attr(select1, "name", "theme");
			attr(select1, "class", "form-control d-block w-100");
			attr(select1, "id", "theme");
			select1.required = true;
			if (/*view*/ ctx[1].theme === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[12].call(select1));
			attr(div2, "class", "col-6");
			attr(label3, "for", "theme");
			attr(div3, "class", "input-group");
			attr(div4, "class", "col-12");
			attr(div5, "class", "row");
			attr(div6, "class", "basicsContainer svelte-19k1p7q");
			attr(button0, "class", "form-control");
			attr(div7, "class", "col-sm-12 col-auto");
			attr(div8, "class", "alertsContainer svelte-19k1p7q");
			attr(div9, "class", "col-sm-3 col-12");
			attr(div10, "class", "row");
			attr(label4, "for", "dynamicPID");
			option2.__value = "";
			option2.value = option2.__value;
			select2.disabled = select2_disabled_value = !/*view*/ ctx[1].dynamic.enabled;
			attr(select2, "name", select2_name_value = "pid" + /*id*/ ctx[0]);
			attr(select2, "class", "form-control");
			attr(select2, "id", "dynamicPID");
			select2.required = true;
			if (/*view*/ ctx[1].dynamic.pid === void 0) add_render_callback(() => /*select2_change_handler*/ ctx[23].call(select2));
			attr(div11, "class", "col-sm-3 col-12");
			attr(label5, "class", "label");
			attr(label5, "for", "dynamicUnit");
			option3.__value = "-";
			option3.value = option3.__value;
			attr(select3, "name", "units");
			select3.disabled = select3_disabled_value = !/*view*/ ctx[1].dynamic.enabled;
			attr(select3, "class", "form-control value");
			select3.required = true;
			attr(div12, "class", "col-sm-3 col-12");
			attr(label6, "for", "dynamicValue");
			input2.disabled = input2_disabled_value = !/*view*/ ctx[1].dynamic.enabled;
			attr(input2, "class", "form-control");
			attr(input2, "type", "text");
			attr(input2, "name", "dynamicValue");
			attr(div13, "class", "col-sm-3 col-12");
			attr(label7, "for", "dynamicOP");
			option4.__value = "";
			option4.value = option4.__value;
			attr(select4, "name", "dynamicOP");
			select4.disabled = select4_disabled_value = !/*view*/ ctx[1].dynamic.enabled;
			attr(select4, "class", "form-control");
			if (/*view*/ ctx[1].dynamic.op === void 0) add_render_callback(() => /*select4_change_handler*/ ctx[26].call(select4));
			attr(div14, "class", "col-sm-3 col-12");
			attr(label8, "for", "dynamicPriority");
			input3.disabled = input3_disabled_value = !/*view*/ ctx[1].dynamic.enabled;
			attr(input3, "class", "form-control");
			attr(input3, "type", "number");
			attr(input3, "name", "dynamicPriority");
			attr(div15, "class", "col-sm-3 col-12");
			attr(div16, "class", "row");
			attr(div17, "class", "dynamicContainer svelte-19k1p7q");
			attr(hr3, "class", "mb-4");
			attr(button1, "class", "btn btn-primary btn-lg btn-block");
			attr(button1, "type", "submit");
			attr(form, "class", "needs-validation");
			attr(div18, "class", "col-sm-12 order-sm-1");
			attr(div19, "id", "edit-container");
			attr(div19, "class", "container");
		},
		m(target, anchor) {
			insert(target, div19, anchor);
			append(div19, div18);
			append(div18, h40);
			append(h40, t0);
			append(h40, t1);
			append(div18, t2);
			append(div18, form);
			append(form, input0);
			append(form, t3);
			append(form, h41);
			append(h41, t4);
			append(form, t5);
			append(form, hr0);
			append(form, t6);
			append(form, div6);
			append(div6, div5);
			append(div5, div0);
			append(div0, label0);
			append(label0, t7);
			append(div0, t8);
			append(div0, input1);
			set_input_value(input1, /*view*/ ctx[1].name);
			append(div5, t9);
			append(div5, div1);
			append(div1, label1);
			append(label1, t10);
			append(div1, t11);
			append(div1, select0);
			append(select0, option0);
			append(option0, t12);

			for (let i = 0; i < 4; i += 1) {
				each_blocks_5[i].m(select0, null);
			}

			select_option(select0, /*view*/ ctx[1].background);
			append(div5, t13);
			append(div5, div2);
			append(div2, label2);
			append(label2, t14);
			append(div2, t15);
			append(div2, select1);
			append(select1, option1);
			append(option1, t16);

			for (let i = 0; i < 1; i += 1) {
				each_blocks_4[i].m(select1, null);
			}

			select_option(select1, /*view*/ ctx[1].theme);
			append(div5, t17);
			append(div5, div4);
			append(div4, label3);
			append(label3, t18);
			append(div4, t19);
			append(div4, div3);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(div3, null);
			}

			append(form, t20);
			append(form, h42);
			append(h42, t21);
			append(form, t22);
			append(form, hr1);
			append(form, t23);
			append(form, div8);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(div8, null);
			}

			append(div8, t24);
			append(div8, div7);
			append(div7, button0);
			append(button0, t25);
			append(form, t26);
			append(form, h43);
			append(h43, t27);
			append(form, t28);
			append(form, hr2);
			append(form, t29);
			append(form, div17);
			append(div17, div10);
			append(div10, div9);

			if (switch_instance) {
				mount_component(switch_instance, div9, null);
			}

			append(div17, t30);
			append(div17, div16);
			append(div16, div11);
			append(div11, label4);
			append(label4, t31);
			append(div11, t32);
			append(div11, select2);
			append(select2, option2);
			append(option2, t33);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select2, null);
			}

			select_option(select2, /*view*/ ctx[1].dynamic.pid);
			append(div16, t34);
			append(div16, div12);
			append(div12, label5);
			append(label5, t35);
			append(div12, t36);
			append(div12, select3);
			append(select3, option3);
			append(option3, t37);
			select_option(select3, /*view*/ ctx[1].dynamic.unit);
			append(div16, t38);
			append(div16, div13);
			append(div13, label6);
			append(label6, t39);
			append(div13, t40);
			append(div13, input2);
			set_input_value(input2, /*view*/ ctx[1].dynamic.value);
			append(div16, t41);
			append(div16, div14);
			append(div14, label7);
			append(label7, t42);
			append(div14, t43);
			append(div14, select4);
			append(select4, option4);
			append(option4, t44);

			for (let i = 0; i < 5; i += 1) {
				each_blocks[i].m(select4, null);
			}

			select_option(select4, /*view*/ ctx[1].dynamic.op);
			append(div16, t45);
			append(div16, div15);
			append(div15, label8);
			append(label8, t46);
			append(div15, t47);
			append(div15, input3);
			set_input_value(input3, /*view*/ ctx[1].dynamic.priority);
			append(form, t48);
			append(form, hr3);
			append(form, t49);
			append(form, button1);
			append(button1, t50);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input1, "input", /*input1_input_handler*/ ctx[10]),
					listen(select0, "change", /*select0_change_handler*/ ctx[11]),
					listen(select1, "change", /*select1_change_handler*/ ctx[12]),
					listen(button0, "click", /*click_handler_1*/ ctx[22]),
					action_destroyer(pidChange_action = /*pidChange*/ ctx[4].call(null, select2)),
					listen(select2, "change", /*select2_change_handler*/ ctx[23]),
					listen(select3, "blur", /*blur_handler_2*/ ctx[24]),
					listen(input2, "input", /*input2_input_handler_1*/ ctx[25]),
					listen(select4, "change", /*select4_change_handler*/ ctx[26]),
					listen(input3, "input", /*input3_input_handler*/ ctx[27]),
					listen(form, "submit", prevent_default(/*handleSubmit*/ ctx[5]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*id*/ 1) set_data(t1, /*id*/ ctx[0]);

			if (dirty[0] & /*view*/ 2 && input1.value !== /*view*/ ctx[1].name) {
				set_input_value(input1, /*view*/ ctx[1].name);
			}

			if (dirty[0] & /*view*/ 2) {
				select_option(select0, /*view*/ ctx[1].background);
			}

			if (dirty[0] & /*view*/ 2) {
				select_option(select1, /*view*/ ctx[1].theme);
			}

			if (dirty[0] & /*view, id, pids, KE_PID*/ 15) {
				each_value_5 = Array(3);
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_5(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(div3, null);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_5.length;
			}

			if (dirty[0] & /*removeAlert, view, id, pids, KE_PID*/ 143) {
				each_value_2 = /*view*/ ctx[1].alerts;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(div8, t24);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			const switch_instance_changes = {};
			if (dirty[0] & /*view*/ 2) switch_instance_changes.checked = /*view*/ ctx[1].dynamic.enabled;

			if (switch_value !== (switch_value = Slider)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div9, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}

			if (dirty[0] & /*pids, KE_PID*/ 12) {
				each_value_1 = /*pids*/ ctx[3];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select2, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (!current || dirty[0] & /*view*/ 2 && select2_disabled_value !== (select2_disabled_value = !/*view*/ ctx[1].dynamic.enabled)) {
				select2.disabled = select2_disabled_value;
			}

			if (!current || dirty[0] & /*id*/ 1 && select2_name_value !== (select2_name_value = "pid" + /*id*/ ctx[0])) {
				attr(select2, "name", select2_name_value);
			}

			if (dirty[0] & /*view*/ 2) {
				select_option(select2, /*view*/ ctx[1].dynamic.pid);
			}

			if (!current || dirty[0] & /*view*/ 2 && select3_disabled_value !== (select3_disabled_value = !/*view*/ ctx[1].dynamic.enabled)) {
				select3.disabled = select3_disabled_value;
			}

			if (!current || dirty[0] & /*view*/ 2 && select3_value_value !== (select3_value_value = /*view*/ ctx[1].dynamic.unit)) {
				select_option(select3, /*view*/ ctx[1].dynamic.unit);
			}

			if (!current || dirty[0] & /*view*/ 2 && input2_disabled_value !== (input2_disabled_value = !/*view*/ ctx[1].dynamic.enabled)) {
				input2.disabled = input2_disabled_value;
			}

			if (dirty[0] & /*view*/ 2 && input2.value !== /*view*/ ctx[1].dynamic.value) {
				set_input_value(input2, /*view*/ ctx[1].dynamic.value);
			}

			if (!current || dirty[0] & /*view*/ 2 && select4_disabled_value !== (select4_disabled_value = !/*view*/ ctx[1].dynamic.enabled)) {
				select4.disabled = select4_disabled_value;
			}

			if (dirty[0] & /*view*/ 2) {
				select_option(select4, /*view*/ ctx[1].dynamic.op);
			}

			if (!current || dirty[0] & /*view*/ 2 && input3_disabled_value !== (input3_disabled_value = !/*view*/ ctx[1].dynamic.enabled)) {
				input3.disabled = input3_disabled_value;
			}

			if (dirty[0] & /*view*/ 2 && to_number(input3.value) !== /*view*/ ctx[1].dynamic.priority) {
				set_input_value(input3, /*view*/ ctx[1].dynamic.priority);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div19);
			destroy_each(each_blocks_5, detaching);
			destroy_each(each_blocks_4, detaching);
			destroy_each(each_blocks_3, detaching);
			destroy_each(each_blocks_2, detaching);
			if (switch_instance) destroy_component(switch_instance);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (158:16) {#each ['banner1.jpg', 'bg.jpg', 'BlackBackground.png', 'CarbonFiber.png'] as background}
function create_each_block_8(ctx) {
	let option;
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(/*background*/ ctx[51]);
			this.h();
		},
		l(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t = claim_text(option_nodes, /*background*/ ctx[51]);
			option_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = option_value_value = /*background*/ ctx[51];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (168:16) {#each ['Stock'] as theme}
function create_each_block_7(ctx) {
	let option;
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(/*theme*/ ctx[48]);
			this.h();
		},
		l(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t = claim_text(option_nodes, /*theme*/ ctx[48]);
			option_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = option_value_value = /*theme*/ ctx[48];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (182:24) {#each pids as pid}
function create_each_block_6(ctx) {
	let option;

	let t0_value = (/*KE_PID*/ ctx[2][/*pid*/ ctx[34]].shortName
	? /*KE_PID*/ ctx[2][/*pid*/ ctx[34]].shortName
	: /*KE_PID*/ ctx[2][/*pid*/ ctx[34]].name) + "";

	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_space(option_nodes);
			option_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = option_value_value = /*pid*/ ctx[34];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (177:16) {#each Array(3) as _, i}
function create_each_block_5(ctx) {
	let div2;
	let div0;
	let select0;
	let option;
	let t0;
	let select0_name_value;
	let select0_id_value;
	let pidChange_action;
	let t1;
	let div1;
	let select1;
	let select1_value_value;
	let t2;
	let mounted;
	let dispose;
	let each_value_6 = /*pids*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value_6.length; i += 1) {
		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
	}

	function select0_change_handler_1() {
		/*select0_change_handler_1*/ ctx[13].call(select0, /*i*/ ctx[39]);
	}

	function blur_handler(...args) {
		return /*blur_handler*/ ctx[14](/*i*/ ctx[39], ...args);
	}

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			select0 = element("select");
			option = element("option");
			t0 = text("-");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			div1 = element("div");
			select1 = element("select");
			t2 = space();
			this.h();
		},
		l(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			select0 = claim_element(div0_nodes, "SELECT", { name: true, class: true, id: true });
			var select0_nodes = children(select0);
			option = claim_element(select0_nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, "-");
			option_nodes.forEach(detach);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select0_nodes);
			}

			select0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t1 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			select1 = claim_element(div1_nodes, "SELECT", { name: true, value: true, class: true });
			children(select1).forEach(detach);
			div1_nodes.forEach(detach);
			t2 = claim_space(div2_nodes);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = "";
			option.value = option.__value;
			attr(select0, "name", select0_name_value = "pid" + /*id*/ ctx[0]);
			attr(select0, "class", "mb-2 form-control");
			attr(select0, "id", select0_id_value = "pid" + /*id*/ ctx[0]);
			if (/*view*/ ctx[1].gauges[/*i*/ ctx[39]].pid === void 0) add_render_callback(select0_change_handler_1);
			attr(div0, "class", "col-12");
			attr(select1, "name", "units");
			attr(select1, "class", "form-control");
			attr(div1, "class", "col-12");
			attr(div2, "class", "col-4 pl-1 pr-1");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, select0);
			append(select0, option);
			append(option, t0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select0, null);
			}

			select_option(select0, /*view*/ ctx[1].gauges[/*i*/ ctx[39]].pid);
			append(div2, t1);
			append(div2, div1);
			append(div1, select1);
			select_option(select1, /*view*/ ctx[1].gauges[/*i*/ ctx[39]].unit);
			append(div2, t2);

			if (!mounted) {
				dispose = [
					action_destroyer(pidChange_action = /*pidChange*/ ctx[4].call(null, select0)),
					listen(select0, "change", select0_change_handler_1),
					listen(select1, "blur", blur_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*pids, KE_PID*/ 12) {
				each_value_6 = /*pids*/ ctx[3];
				let i;

				for (i = 0; i < each_value_6.length; i += 1) {
					const child_ctx = get_each_context_6(ctx, each_value_6, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_6.length;
			}

			if (dirty[0] & /*id*/ 1 && select0_name_value !== (select0_name_value = "pid" + /*id*/ ctx[0])) {
				attr(select0, "name", select0_name_value);
			}

			if (dirty[0] & /*id*/ 1 && select0_id_value !== (select0_id_value = "pid" + /*id*/ ctx[0])) {
				attr(select0, "id", select0_id_value);
			}

			if (dirty[0] & /*view*/ 2) {
				select_option(select0, /*view*/ ctx[1].gauges[/*i*/ ctx[39]].pid);
			}

			if (dirty[0] & /*view*/ 2 && select1_value_value !== (select1_value_value = /*view*/ ctx[1].gauges[/*i*/ ctx[39]].unit)) {
				select_option(select1, /*view*/ ctx[1].gauges[/*i*/ ctx[39]].unit);
			}
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (225:20) {#each ['=', '>', '<', '>=', '<='] as op}
function create_each_block_4(ctx) {
	let option;
	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(/*op*/ ctx[31]);
			t1 = space();
			this.h();
		},
		l(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, /*op*/ ctx[31]);
			t1 = claim_space(option_nodes);
			option_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = option_value_value = /*op*/ ctx[31];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (238:20) {#each pids as pid}
function create_each_block_3(ctx) {
	let option;

	let t0_value = (/*pid*/ ctx[34]
	? /*KE_PID*/ ctx[2][/*pid*/ ctx[34]].shortName
		? /*KE_PID*/ ctx[2][/*pid*/ ctx[34]].shortName
		: /*KE_PID*/ ctx[2][/*pid*/ ctx[34]].name
	: "") + "";

	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_space(option_nodes);
			option_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = option_value_value = /*pid*/ ctx[34];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (207:10) {#each view.alerts as alert, i}
function create_each_block_2(ctx) {
	let div8;
	let div6;
	let div0;
	let label0;
	let t0;
	let t1;
	let input0;
	let t2;
	let div1;
	let label1;
	let t3;
	let t4;
	let input1;
	let t5;
	let div2;
	let label2;
	let t6;
	let t7;
	let select0;
	let option0;
	let t8;
	let t9;
	let div3;
	let label3;
	let t10;
	let t11;
	let select1;
	let option1;
	let t12;
	let select1_name_value;
	let pidChange_action;
	let t13;
	let div4;
	let label4;
	let t14;
	let t15;
	let select2;
	let option2;
	let t16;
	let select2_value_value;
	let t17;
	let div5;
	let label5;
	let t18;
	let t19;
	let input2;
	let t20;
	let div7;
	let button;
	let t21;
	let mounted;
	let dispose;

	function input0_input_handler() {
		/*input0_input_handler*/ ctx[15].call(input0, /*each_value_2*/ ctx[38], /*i*/ ctx[39]);
	}

	function input1_input_handler_1() {
		/*input1_input_handler_1*/ ctx[16].call(input1, /*each_value_2*/ ctx[38], /*i*/ ctx[39]);
	}

	let each_value_4 = ["=", ">", "<", ">=", "<="];
	let each_blocks_1 = [];

	for (let i = 0; i < 5; i += 1) {
		each_blocks_1[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	function select0_change_handler_2() {
		/*select0_change_handler_2*/ ctx[17].call(select0, /*each_value_2*/ ctx[38], /*i*/ ctx[39]);
	}

	let each_value_3 = /*pids*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	function select1_change_handler_1() {
		/*select1_change_handler_1*/ ctx[18].call(select1, /*each_value_2*/ ctx[38], /*i*/ ctx[39]);
	}

	function blur_handler_1(...args) {
		return /*blur_handler_1*/ ctx[19](/*alert*/ ctx[37], /*each_value_2*/ ctx[38], /*i*/ ctx[39], ...args);
	}

	function input2_input_handler() {
		/*input2_input_handler*/ ctx[20].call(input2, /*each_value_2*/ ctx[38], /*i*/ ctx[39]);
	}

	function click_handler() {
		return /*click_handler*/ ctx[21](/*i*/ ctx[39]);
	}

	return {
		c() {
			div8 = element("div");
			div6 = element("div");
			div0 = element("div");
			label0 = element("label");
			t0 = text("Message");
			t1 = space();
			input0 = element("input");
			t2 = space();
			div1 = element("div");
			label1 = element("label");
			t3 = text("Value");
			t4 = space();
			input1 = element("input");
			t5 = space();
			div2 = element("div");
			label2 = element("label");
			t6 = text("OP");
			t7 = space();
			select0 = element("select");
			option0 = element("option");
			t8 = text("-");

			for (let i = 0; i < 5; i += 1) {
				each_blocks_1[i].c();
			}

			t9 = space();
			div3 = element("div");
			label3 = element("label");
			t10 = text("PID");
			t11 = space();
			select1 = element("select");
			option1 = element("option");
			t12 = text("-");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t13 = space();
			div4 = element("div");
			label4 = element("label");
			t14 = text("Unit");
			t15 = space();
			select2 = element("select");
			option2 = element("option");
			t16 = text("-");
			t17 = space();
			div5 = element("div");
			label5 = element("label");
			t18 = text("Priority");
			t19 = space();
			input2 = element("input");
			t20 = space();
			div7 = element("div");
			button = element("button");
			t21 = text("Delete");
			this.h();
		},
		l(nodes) {
			div8 = claim_element(nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div6 = claim_element(div8_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div0 = claim_element(div6_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			label0 = claim_element(div0_nodes, "LABEL", { class: true, for: true });
			var label0_nodes = children(label0);
			t0 = claim_text(label0_nodes, "Message");
			label0_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);

			input0 = claim_element(div0_nodes, "INPUT", {
				required: true,
				class: true,
				type: true,
				name: true
			});

			div0_nodes.forEach(detach);
			t2 = claim_space(div6_nodes);
			div1 = claim_element(div6_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			label1 = claim_element(div1_nodes, "LABEL", { class: true, for: true });
			var label1_nodes = children(label1);
			t3 = claim_text(label1_nodes, "Value");
			label1_nodes.forEach(detach);
			t4 = claim_space(div1_nodes);

			input1 = claim_element(div1_nodes, "INPUT", {
				required: true,
				class: true,
				type: true,
				name: true
			});

			div1_nodes.forEach(detach);
			t5 = claim_space(div6_nodes);
			div2 = claim_element(div6_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			label2 = claim_element(div2_nodes, "LABEL", { for: true });
			var label2_nodes = children(label2);
			t6 = claim_text(label2_nodes, "OP");
			label2_nodes.forEach(detach);
			t7 = claim_space(div2_nodes);
			select0 = claim_element(div2_nodes, "SELECT", { required: true, name: true, class: true });
			var select0_nodes = children(select0);
			option0 = claim_element(select0_nodes, "OPTION", { value: true });
			var option0_nodes = children(option0);
			t8 = claim_text(option0_nodes, "-");
			option0_nodes.forEach(detach);

			for (let i = 0; i < 5; i += 1) {
				each_blocks_1[i].l(select0_nodes);
			}

			select0_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			t9 = claim_space(div6_nodes);
			div3 = claim_element(div6_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			label3 = claim_element(div3_nodes, "LABEL", { class: true, for: true });
			var label3_nodes = children(label3);
			t10 = claim_text(label3_nodes, "PID");
			label3_nodes.forEach(detach);
			t11 = claim_space(div3_nodes);

			select1 = claim_element(div3_nodes, "SELECT", {
				name: true,
				class: true,
				id: true,
				required: true
			});

			var select1_nodes = children(select1);
			option1 = claim_element(select1_nodes, "OPTION", { value: true });
			var option1_nodes = children(option1);
			t12 = claim_text(option1_nodes, "-");
			option1_nodes.forEach(detach);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select1_nodes);
			}

			select1_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			t13 = claim_space(div6_nodes);
			div4 = claim_element(div6_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			label4 = claim_element(div4_nodes, "LABEL", { class: true, for: true });
			var label4_nodes = children(label4);
			t14 = claim_text(label4_nodes, "Unit");
			label4_nodes.forEach(detach);
			t15 = claim_space(div4_nodes);

			select2 = claim_element(div4_nodes, "SELECT", {
				name: true,
				value: true,
				class: true,
				required: true
			});

			var select2_nodes = children(select2);
			option2 = claim_element(select2_nodes, "OPTION", { value: true });
			var option2_nodes = children(option2);
			t16 = claim_text(option2_nodes, "-");
			option2_nodes.forEach(detach);
			select2_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t17 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			label5 = claim_element(div5_nodes, "LABEL", { class: true, for: true });
			var label5_nodes = children(label5);
			t18 = claim_text(label5_nodes, "Priority");
			label5_nodes.forEach(detach);
			t19 = claim_space(div5_nodes);

			input2 = claim_element(div5_nodes, "INPUT", {
				required: true,
				class: true,
				type: true,
				name: true
			});

			div5_nodes.forEach(detach);
			div6_nodes.forEach(detach);
			t20 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			button = claim_element(div7_nodes, "BUTTON", { class: true, type: true });
			var button_nodes = children(button);
			t21 = claim_text(button_nodes, "Delete");
			button_nodes.forEach(detach);
			div7_nodes.forEach(detach);
			div8_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(label0, "class", "label");
			attr(label0, "for", "alertMessage");
			input0.required = true;
			attr(input0, "class", "value form-control");
			attr(input0, "type", "text");
			attr(input0, "name", "alertMessage");
			attr(div0, "class", "col-sm-6 col-12 pl-1 pr-1");
			attr(label1, "class", "label");
			attr(label1, "for", "alertValue");
			input1.required = true;
			attr(input1, "class", "form-control");
			attr(input1, "type", "text");
			attr(input1, "name", "alertValue");
			attr(div1, "class", "col-sm-3 col-12 pl-1 pr-1");
			attr(label2, "for", "alertOP");
			option0.__value = "";
			option0.value = option0.__value;
			select0.required = true;
			attr(select0, "name", "alertOP");
			attr(select0, "class", "form-control");
			if (/*alert*/ ctx[37].op === void 0) add_render_callback(select0_change_handler_2);
			attr(div2, "class", "col-sm-3 col-12 pl-1 pr-1");
			attr(label3, "class", "label");
			attr(label3, "for", "alertPID");
			option1.__value = "";
			option1.value = option1.__value;
			attr(select1, "name", select1_name_value = "pid" + /*id*/ ctx[0]);
			attr(select1, "class", "value form-control pl-1 pr-1");
			attr(select1, "id", "alertPID");
			select1.required = true;
			if (/*alert*/ ctx[37].pid === void 0) add_render_callback(select1_change_handler_1);
			attr(div3, "class", "col-sm-6 col-12 pl-1 pr-1");
			attr(label4, "class", "label");
			attr(label4, "for", "alertUnit");
			option2.__value = "-";
			option2.value = option2.__value;
			attr(select2, "name", "units");
			attr(select2, "class", "form-control value");
			select2.required = true;
			attr(div4, "class", "col-sm-3 col-12 pl-1 pr-1");
			attr(label5, "class", "label");
			attr(label5, "for", "alertPriority");
			input2.required = true;
			attr(input2, "class", "value form-control");
			attr(input2, "type", "number");
			attr(input2, "name", "alertPriority");
			attr(div5, "class", "col-sm-3 col-12 pl-1 pr-1");
			attr(div6, "class", "input-group");
			attr(button, "class", "form-control delete svelte-19k1p7q");
			attr(button, "type", "button");
			attr(div7, "class", "mt-2 text-center");
			attr(div8, "class", "alertContainer svelte-19k1p7q");
		},
		m(target, anchor) {
			insert(target, div8, anchor);
			append(div8, div6);
			append(div6, div0);
			append(div0, label0);
			append(label0, t0);
			append(div0, t1);
			append(div0, input0);
			set_input_value(input0, /*alert*/ ctx[37].message);
			append(div6, t2);
			append(div6, div1);
			append(div1, label1);
			append(label1, t3);
			append(div1, t4);
			append(div1, input1);
			set_input_value(input1, /*alert*/ ctx[37].value);
			append(div6, t5);
			append(div6, div2);
			append(div2, label2);
			append(label2, t6);
			append(div2, t7);
			append(div2, select0);
			append(select0, option0);
			append(option0, t8);

			for (let i = 0; i < 5; i += 1) {
				each_blocks_1[i].m(select0, null);
			}

			select_option(select0, /*alert*/ ctx[37].op);
			append(div6, t9);
			append(div6, div3);
			append(div3, label3);
			append(label3, t10);
			append(div3, t11);
			append(div3, select1);
			append(select1, option1);
			append(option1, t12);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select1, null);
			}

			select_option(select1, /*alert*/ ctx[37].pid);
			append(div6, t13);
			append(div6, div4);
			append(div4, label4);
			append(label4, t14);
			append(div4, t15);
			append(div4, select2);
			append(select2, option2);
			append(option2, t16);
			select_option(select2, /*alert*/ ctx[37].unit);
			append(div6, t17);
			append(div6, div5);
			append(div5, label5);
			append(label5, t18);
			append(div5, t19);
			append(div5, input2);
			set_input_value(input2, /*alert*/ ctx[37].priority);
			append(div8, t20);
			append(div8, div7);
			append(div7, button);
			append(button, t21);

			if (!mounted) {
				dispose = [
					listen(input0, "input", input0_input_handler),
					listen(input1, "input", input1_input_handler_1),
					listen(select0, "change", select0_change_handler_2),
					action_destroyer(pidChange_action = /*pidChange*/ ctx[4].call(null, select1)),
					listen(select1, "change", select1_change_handler_1),
					listen(select2, "blur", blur_handler_1),
					listen(input2, "input", input2_input_handler),
					listen(button, "click", click_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*view*/ 2 && input0.value !== /*alert*/ ctx[37].message) {
				set_input_value(input0, /*alert*/ ctx[37].message);
			}

			if (dirty[0] & /*view*/ 2 && input1.value !== /*alert*/ ctx[37].value) {
				set_input_value(input1, /*alert*/ ctx[37].value);
			}

			if (dirty[0] & /*view*/ 2) {
				select_option(select0, /*alert*/ ctx[37].op);
			}

			if (dirty[0] & /*pids, KE_PID*/ 12) {
				each_value_3 = /*pids*/ ctx[3];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}

			if (dirty[0] & /*id*/ 1 && select1_name_value !== (select1_name_value = "pid" + /*id*/ ctx[0])) {
				attr(select1, "name", select1_name_value);
			}

			if (dirty[0] & /*view*/ 2) {
				select_option(select1, /*alert*/ ctx[37].pid);
			}

			if (dirty[0] & /*view*/ 2 && select2_value_value !== (select2_value_value = /*alert*/ ctx[37].unit)) {
				select_option(select2, /*alert*/ ctx[37].unit);
			}

			if (dirty[0] & /*view*/ 2 && to_number(input2.value) !== /*alert*/ ctx[37].priority) {
				set_input_value(input2, /*alert*/ ctx[37].priority);
			}
		},
		d(detaching) {
			if (detaching) detach(div8);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (285:16) {#each pids as pid}
function create_each_block_1(ctx) {
	let option;

	let t0_value = (/*KE_PID*/ ctx[2][/*pid*/ ctx[34]].shortName
	? /*KE_PID*/ ctx[2][/*pid*/ ctx[34]].shortName
	: /*KE_PID*/ ctx[2][/*pid*/ ctx[34]].name) + "";

	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			this.h();
		},
		l(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, t0_value);
			t1 = claim_space(option_nodes);
			option_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = option_value_value = /*pid*/ ctx[34];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (307:16) {#each ['=', '>', '<', '>=', '<='] as op}
function create_each_block(ctx) {
	let option;
	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(/*op*/ ctx[31]);
			t1 = space();
			this.h();
		},
		l(nodes) {
			option = claim_element(nodes, "OPTION", { value: true });
			var option_nodes = children(option);
			t0 = claim_text(option_nodes, /*op*/ ctx[31]);
			t1 = claim_space(option_nodes);
			option_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = option_value_value = /*op*/ ctx[31];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	let if_block = /*view*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "col-sm-12 col-sm-8 pb-4");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*view*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*view*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

async function load({ page, context }) {
	return {
		info: "some info",
		context: { info: "some info", id: page.params.slug }
	};
}

function instance($$self, $$props, $$invalidate) {
	let $session;
	component_subscribe($$self, session, $$value => $$invalidate(29, $session = $$value));
	let { id } = $$props;
	let { info } = $$props;
	let configuration = $session.configuration;
	let view = configuration.views[id];
	const KE_PID = $session.constants.KE_PID;
	const pids = Object.keys(KE_PID);

	function normalizeGauges() {
		if (view) {
			// Ensure we always have 3 entries in our array
			while (view.gauges.length != 3) {
				view.gauges.push({
					"module": "",
					"themeConfig": "",
					"unit": "",
					"path": "",
					"pid": ""
				});
			}
		}
	}

	normalizeGauges();

	function pidChange(node) {
		function getUnits(node) {
			const pid = node.target.value;

			// find our units for the provided pid
			let unitsSelect = node.srcElement.parentElement.nextSibling.nextSibling.querySelectorAll("[name=units]")[0];

			// Clear our old units from units select input
			let i = 0;

			for (i = 0; i < unitsSelect.options.length; i++) {
				unitsSelect.remove(i);
			}

			if (!pid) {
				unitsSelect.options[0] = new Option("-", "", false, false);
				return;
			}

			// Add our units to our select input
			KE_PID[pid].units.forEach((unit, i) => {
				unitsSelect.options[i] = new Option(unit, unit, false, false);
			});

			// Actually set the select value to the first unit
			unitsSelect.value = unitsSelect.options[0].value;

			unitsSelect.focus();
			unitsSelect.blur();
		}

		node.addEventListener("change", getUnits);

		// Set our initial values
		var event = new Event("change");

		node.dispatchEvent(event);

		return {
			destroy() {
				node.removeEventListener("blur", getUnits);
			}
		};
	}

	function handleSubmit(event) {
		// Here we need to sanitize our input :/
		let gauges = [];

		view.gauges.forEach((gauge, i) => {
			if (!gauge.pid || !gauge.unit) {
				return;
			} else {
				gauges.push({
					"module": "Radial",
					"themeConfig": "120",
					"unit": gauge.unit,
					"path": "/" + view.theme + "/",
					"pid": gauge.pid
				});
			}
		});

		// We don't want to mutate view here as we do some gauge [] fanagling
		let temp_view = view;

		temp_view.gauges = gauges;
		configuration.views[id] = temp_view;

		fetch("/api/config", {
			method: "POST",
			body: JSON.stringify(configuration)
		}).then(d => d.json()).then(d => {
			set_store_value(session, $session.configuration = d.config, $session);
			normalizeGauges();

			set_store_value(
				session,
				$session.actions = [
					{
						id: $session.count,
						msg: d.message,
						theme: d.ret ? "alert-info" : "alert-warning"
					},
					...$session.actions
				],
				$session
			);
		});
	}

	function addAlert() {
		$$invalidate(
			1,
			view.alerts = [
				...view.alerts,
				{
					"message": "",
					"op": "",
					"priority": "",
					"unit": "",
					"value": ""
				}
			],
			view
		);
	}

	function removeAlert(index) {
		let tempArr = view.alerts;
		tempArr.splice(index, 1);
		$$invalidate(1, view.alerts = tempArr, view);
	}

	function toggleDynamic() {
		$$invalidate(1, view.dynamic.enabled = view.dynamic.enabled ? false : true, view);
	}

	function input1_input_handler() {
		view.name = this.value;
		$$invalidate(1, view);
	}

	function select0_change_handler() {
		view.background = select_value(this);
		$$invalidate(1, view);
	}

	function select1_change_handler() {
		view.theme = select_value(this);
		$$invalidate(1, view);
	}

	function select0_change_handler_1(i) {
		view.gauges[i].pid = select_value(this);
		$$invalidate(1, view);
	}

	const blur_handler = (i, e) => $$invalidate(1, view.gauges[i].unit = e.target.value, view);

	function input0_input_handler(each_value_2, i) {
		each_value_2[i].message = this.value;
		$$invalidate(1, view);
	}

	function input1_input_handler_1(each_value_2, i) {
		each_value_2[i].value = this.value;
		$$invalidate(1, view);
	}

	function select0_change_handler_2(each_value_2, i) {
		each_value_2[i].op = select_value(this);
		$$invalidate(1, view);
	}

	function select1_change_handler_1(each_value_2, i) {
		each_value_2[i].pid = select_value(this);
		$$invalidate(1, view);
	}

	const blur_handler_1 = (alert, each_value_2, i, e) => $$invalidate(1, each_value_2[i].unit = e.target.value, view);

	function input2_input_handler(each_value_2, i) {
		each_value_2[i].priority = to_number(this.value);
		$$invalidate(1, view);
	}

	const click_handler = i => {
		removeAlert(i);
	};

	const click_handler_1 = () => addAlert();

	function select2_change_handler() {
		view.dynamic.pid = select_value(this);
		$$invalidate(1, view);
	}

	const blur_handler_2 = e => $$invalidate(1, view.dynamic.unit = e.target.value, view);

	function input2_input_handler_1() {
		view.dynamic.value = this.value;
		$$invalidate(1, view);
	}

	function select4_change_handler() {
		view.dynamic.op = select_value(this);
		$$invalidate(1, view);
	}

	function input3_input_handler() {
		view.dynamic.priority = to_number(this.value);
		$$invalidate(1, view);
	}

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("info" in $$props) $$invalidate(9, info = $$props.info);
	};

	return [
		id,
		view,
		KE_PID,
		pids,
		pidChange,
		handleSubmit,
		addAlert,
		removeAlert,
		toggleDynamic,
		info,
		input1_input_handler,
		select0_change_handler,
		select1_change_handler,
		select0_change_handler_1,
		blur_handler,
		input0_input_handler,
		input1_input_handler_1,
		select0_change_handler_2,
		select1_change_handler_1,
		blur_handler_1,
		input2_input_handler,
		click_handler,
		click_handler_1,
		select2_change_handler,
		blur_handler_2,
		input2_input_handler_1,
		select4_change_handler,
		input3_input_handler
	];
}

class U5Bslugu5D extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { id: 0, info: 9 }, [-1, -1]);
	}
}

export default U5Bslugu5D;
export { load };
//# sourceMappingURL=[slug].svelte.js.map
