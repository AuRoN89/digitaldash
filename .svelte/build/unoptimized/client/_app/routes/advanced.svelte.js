import './advanced.svelte.css.proxy.js';
/* src/routes/advanced.svelte generated by Svelte v3.32.0 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_input_value,
	set_store_value,
	space,
	text
} from "../../_snowpack/pkg/svelte/internal.js";

import { session } from "../assets/runtime/app/stores.js";

function create_if_block(ctx) {
	let div;
	let t;

	return {
		c() {
			div = element("div");
			t = text("Invalid JSON");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t = claim_text(div_nodes, "Invalid JSON");
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "alert alert-danger");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let textarea;
	let t1;
	let button;
	let t2;
	let mounted;
	let dispose;
	let if_block = /*invalid*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t0 = space();
			textarea = element("textarea");
			t1 = space();
			button = element("button");
			t2 = text("Save");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t0 = claim_space(div_nodes);
			textarea = claim_element(div_nodes, "TEXTAREA", { class: true });
			children(textarea).forEach(detach);
			t1 = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", { disabled: true, class: true, type: true });
			var button_nodes = children(button);
			t2 = claim_text(button_nodes, "Save");
			button_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(textarea, "class", "form-control svelte-rfhj3t");
			button.disabled = /*invalid*/ ctx[1];
			attr(button, "class", "mt-2 form-control");
			attr(button, "type", "submit");
			attr(div, "class", "col-12 pr-4 pl-4 advanced");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t0);
			append(div, textarea);
			set_input_value(textarea, /*configString*/ ctx[0]);
			append(div, t1);
			append(div, button);
			append(button, t2);

			if (!mounted) {
				dispose = [
					listen(textarea, "input", /*textarea_input_handler*/ ctx[4]),
					listen(button, "click", /*submit*/ ctx[2])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*invalid*/ ctx[1]) {
				if (if_block) {
					
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*configString*/ 1) {
				set_input_value(textarea, /*configString*/ ctx[0]);
			}

			if (dirty & /*invalid*/ 2) {
				button.disabled = /*invalid*/ ctx[1];
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

async function preload(page, session) {
	const response = await this.fetch("/api/config");
	const configuration = await response.json();
	return { configuration };
}

function instance($$self, $$props, $$invalidate) {
	let $session;
	component_subscribe($$self, session, $$value => $$invalidate(5, $session = $$value));
	let { configuration } = $$props;
	let configString = JSON.stringify($session.configuration, null, 2);

	function submit() {
		fetch("/api/config", { method: "POST", body: configString }).then(d => d.json()).then(d => {
			set_store_value(session, $session.configuration = d.config, $session);

			set_store_value(
				session,
				$session.actions = [
					{
						id: $session.count,
						msg: d.message,
						theme: d.ret ? "alert-info" : "alert-danger"
					},
					...$session.actions
				],
				$session
			);
		});
	}

	let invalid = false;

	function textarea_input_handler() {
		configString = this.value;
		$$invalidate(0, configString);
	}

	$$self.$$set = $$props => {
		if ("configuration" in $$props) $$invalidate(3, configuration = $$props.configuration);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*configString*/ 1) {
			$: {
				try {
					JSON.parse(configString);
					$$invalidate(1, invalid = false);
				} catch(e) {
					$$invalidate(1, invalid = true);
				}
			}
		}
	};

	return [configString, invalid, submit, configuration, textarea_input_handler];
}

class Advanced extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { configuration: 3 });
	}
}

export default Advanced;
export { preload };
//# sourceMappingURL=advanced.svelte.js.map
