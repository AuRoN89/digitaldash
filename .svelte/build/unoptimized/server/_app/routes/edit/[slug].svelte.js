import './[slug].svelte.css.proxy.js';
/* src/routes/edit/[slug].svelte generated by Svelte v3.32.3 */
import {
	add_attribute,
	create_ssr_component,
	each,
	escape,
	missing_component,
	set_store_value,
	subscribe,
	validate_component
} from "../../../_snowpack/pkg/svelte/internal.js";

import { session } from "../../assets/runtime/app/stores.js";
import Slider from "../../../_components/Slider.svelte.js";

const css = {
	code: ".alertContainer.svelte-19k1p7q{padding:5px;margin:5px;border-radius:0.5em;border:grey;border-width:1px;border-style:solid}.delete.svelte-19k1p7q{background-color:rgb(220, 176, 176)}",
	map: "{\"version\":3,\"file\":\"[slug].svelte\",\"sources\":[\"[slug].svelte\"],\"sourcesContent\":[\"<script context=\\\"module\\\">\\n  export async function load({ page, context }) {\\n    return { props: { id: page.params.slug } };\\n  }\\n</script>\\n\\n<script>\\n  import { session } from \\\"$app/stores\\\";\\n  import Slider from \\\"../../components/Slider.svelte\\\";\\n\\n  export let id;\\n\\n  let configuration = $session.configuration;\\n\\n  let view     = configuration.views[id];\\n  const KE_PID = $session.constants.KE_PID;\\n  const pids   = Object.keys( KE_PID );\\n\\n  function normalizeGauges() {\\n    if ( view ) {\\n      // Ensure we always have 3 entries in our array\\n      while ( view.gauges.length != 3 ) {\\n        view.gauges.push({\\n          \\\"module\\\"      : \\\"\\\",\\n          \\\"themeConfig\\\" : \\\"\\\",\\n          \\\"unit\\\"        : \\\"\\\",\\n          \\\"path\\\"        : \\\"\\\",\\n          \\\"pid\\\"         : \\\"\\\"\\n        });\\n      }\\n    }\\n  }\\n  normalizeGauges();\\n\\n  function pidChange( node ) {\\n    function getUnits( node ) {\\n      const pid = node.target.value;\\n\\n      // find our units for the provided pid\\n      let unitsSelect = node.srcElement.parentElement.nextSibling.nextSibling.querySelectorAll('[name=units]')[0]\\n      // Clear our old units from units select input\\n      let i = 0;\\n      for (i = 0; i < unitsSelect.options.length; i++) {\\n        unitsSelect.remove(i);\\n      }\\n\\n      if ( !pid ) {\\n        unitsSelect.options[0] = new Option('-', '', false, false);\\n        return;\\n      }\\n      // Add our units to our select input\\n      Object.keys(KE_PID[pid].units).forEach((unit, i) => {\\n        unitsSelect.options[i] = new Option(unit, unit, false, false);\\n      });\\n      // Actually set the select value to the first unit\\n      unitsSelect.value = unitsSelect.options[0].value;\\n      unitsSelect.focus();\\n      unitsSelect.blur();\\n    }\\n    node.addEventListener( \\\"change\\\", getUnits );\\n    // Set our initial values\\n    var event = new Event('change');\\n    node.dispatchEvent( event );\\n\\n    return {\\n      destroy() {\\n        node.removeEventListener( \\\"blur\\\", getUnits );\\n      }\\n    }\\n  }\\n\\n  function handleSubmit(event) {\\n    // Here we need to sanitize our input :/\\n    let gauges = [];\\n    view.gauges.forEach( (gauge, i) => {\\n      if ( !gauge.pid || !gauge.unit ) {\\n        return;\\n      }\\n      else {\\n        gauges.push({\\n          \\\"module\\\"      : \\\"Radial\\\",\\n          \\\"themeConfig\\\" : \\\"120\\\",\\n          \\\"unit\\\"        : gauge.unit,\\n          \\\"path\\\"        : \\\"/\\\"+view.theme+\\\"/\\\",\\n          \\\"pid\\\"         : gauge.pid\\n        });\\n      }\\n    });\\n\\n    // We don't want to mutate view here as we do some gauge [] fanagling\\n    let temp_view           = view;\\n    temp_view.gauges        = gauges;\\n    configuration.views[id] = temp_view;\\n\\n    fetch(\\\"/api/config\\\", {\\n        method : \\\"POST\\\",\\n        body   : JSON.stringify( configuration )\\n      })\\n      .then(d => d.json())\\n      .then(d => {\\n        $session.configuration = d.config;\\n        normalizeGauges();\\n\\n        $session.actions = [{\\n          id    : $session.count,\\n          msg   : d.message,\\n          theme : d.ret ? 'alert-info' : 'alert-warning',\\n        }, ...$session.actions];\\n      });\\n  }\\n\\n  function addAlert() {\\n    view.alerts = [...view.alerts, {\\n      \\\"message\\\" : \\\"\\\",\\n      \\\"op\\\"      : \\\"\\\",\\n      \\\"priority\\\": \\\"\\\",\\n      \\\"unit\\\"    : \\\"\\\",\\n      \\\"value\\\"   : \\\"\\\",\\n    }];\\n  }\\n\\n  function removeAlert( index ) {\\n    let tempArr = view.alerts;\\n    tempArr.splice( index, 1 );\\n\\n    view.alerts = tempArr;\\n  }\\n\\n  function toggleDynamic() {\\n    view.dynamic.enabled = view.dynamic.enabled ? false : true;\\n  }\\n</script>\\n\\n<div class=\\\"col-sm-12 col-sm-8 pb-4\\\">\\n  {#if view}\\n  <div id=\\\"edit-container\\\" class=\\\"container\\\">\\n    <div class=\\\"col-sm-12 order-sm-1\\\">\\n      <h4 class=\\\"mb-3\\\">Editing view #{id}</h4>\\n      <form on:submit|preventDefault=\\\"{handleSubmit}\\\" class=\\\"needs-validation\\\">\\n        <input type=\\\"hidden\\\" value=\\\"<%$id%>\\\" name=\\\"id\\\"/>\\n\\n          <h4>Basics</h4>\\n          <hr/>\\n\\n        <div class=\\\"basicsContainer\\\">\\n          <div class=\\\"row\\\">\\n\\n            <div class=\\\"col-12\\\">\\n              <label for=\\\"name\\\">View name</label>\\n              <input bind:value={view.name} name=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" placeholder=\\\"\\\" required>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n              <label for=\\\"background\\\">Background</label>\\n              <select bind:value={view.background} name=\\\"background\\\" class=\\\"custom-select form-control d-block w-100\\\" id=\\\"country\\\" required>\\n                <option value=\\\"\\\">-</option>\\n                {#each ['banner1.jpg', 'bg.jpg', 'BlackBackground.png', 'CarbonFiber.png'] as background}\\n                <option value={background}>{background}</option>\\n                {/each}\\n              </select>\\n            </div>\\n\\n            <div class=\\\"col-6\\\">\\n              <label for=\\\"theme\\\">Theme</label>\\n              <select bind:value={view.theme} name=\\\"theme\\\" class=\\\"form-control d-block w-100\\\" id=\\\"theme\\\" required>\\n                <option value=\\\"\\\">-</option>\\n                {#each ['Stock'] as theme}\\n                <option value={theme}>{theme}</option>\\n                {/each}\\n              </select>\\n            </div>\\n\\n            <div class=\\\"col-12\\\">\\n              <label for=\\\"theme\\\">Vehicle Parameters</label>\\n              <div class=\\\"input-group\\\">\\n                {#each Array(3) as _, i}\\n                  <div class=\\\"col-4 pl-1 pr-1\\\">\\n                    <div class=\\\"col-12\\\">\\n                      <select use:pidChange bind:value={view.gauges[i].pid} name=\\\"pid{id}\\\" class=\\\"mb-2 form-control\\\" id=\\\"pid{id}\\\">\\n                        <option value=\\\"\\\">-</option>\\n                        {#each pids as pid}\\n                          <option value={pid}>\\n                            {KE_PID[pid].shortName ? KE_PID[pid].shortName : KE_PID[pid].name}\\n                          </option>\\n                        {/each}\\n                      </select>\\n                    </div>\\n\\n                    <!-- Units for PID -->\\n                    <div class=\\\"col-12\\\">\\n                      <select name=\\\"units\\\" on:blur=\\\"{ e => view.gauges[i].unit = e.target.value }\\\" value={view.gauges[i].unit} class=\\\"form-control\\\"></select>\\n                    </div>\\n                  </div>\\n                {/each}\\n              </div>\\n            </div>\\n\\n          </div>\\n        </div>\\n        <!-- END BASICS -->\\n\\n        <h4>Alerts</h4>\\n        <hr/>\\n\\n        <div class=\\\"alertsContainer\\\">\\n          {#each view.alerts as alert, i}\\n            <div class=\\\"alertContainer\\\">\\n\\n              <div class=\\\"input-group\\\">\\n                <div class=\\\"col-sm-6 col-12 pl-1 pr-1\\\">\\n                  <label class=\\\"label\\\" for=\\\"alertMessage\\\">Message</label>\\n                  <input required bind:value={alert.message} class=\\\"value form-control\\\" type=\\\"text\\\" name=\\\"alertMessage\\\"/>\\n                </div>\\n\\n                <div class=\\\"col-sm-3 col-12 pl-1 pr-1\\\">\\n                  <label class=\\\"label\\\" for=\\\"alertValue\\\">Value</label>\\n                  <input required bind:value={alert.value} class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"alertValue\\\"/>\\n                </div>\\n\\n                <div class=\\\"col-sm-3 col-12 pl-1 pr-1\\\">\\n                  <label for=\\\"alertOP\\\">OP</label>\\n                  <select required bind:value={alert.op} name=\\\"alertOP\\\" class=\\\"form-control\\\">\\n                    <option value=\\\"\\\">-</option>\\n                    {#each ['=', '>', '<', '>=', '<='] as op}\\n                    <option value={op}>\\n                      {op}\\n                    </option>\\n                    {/each}\\n                  </select>\\n                </div>\\n\\n                <div class=\\\"col-sm-6 col-12 pl-1 pr-1\\\">\\n                  <label class=\\\"label\\\" for=\\\"alertPID\\\">PID</label>\\n\\n                  <select use:pidChange bind:value={alert.pid} name=\\\"pid{id}\\\" class=\\\"value form-control pl-1 pr-1\\\" id=\\\"alertPID\\\" required>\\n                    <option value=\\\"\\\">-</option>\\n                    {#each pids as pid}\\n                      <option value={pid}>\\n                        {pid ? KE_PID[pid].shortName ? KE_PID[pid].shortName : KE_PID[pid].name : ''}\\n                      </option>\\n                    {/each}\\n                  </select>\\n                </div>\\n\\n                <div class=\\\"col-sm-3 col-12 pl-1 pr-1\\\">\\n                  <label class=\\\"label\\\" for=\\\"alertUnit\\\">Unit</label>\\n                  <select name=\\\"units\\\" on:blur=\\\"{ e => alert.unit = e.target.value }\\\" value={alert.unit} class=\\\"form-control value\\\" required><option>-</option></select>\\n                </div>\\n\\n                <div class=\\\"col-sm-3 col-12 pl-1 pr-1\\\">\\n                  <label class=\\\"label\\\" for=\\\"alertPriority\\\">Priority</label>\\n                  <input required bind:value={alert.priority} class=\\\"value form-control\\\" type=\\\"number\\\" name=\\\"alertPriority\\\"/>\\n                </div>\\n              </div>\\n\\n              <div class=\\\"mt-2 text-center\\\">\\n                <button on:click=\\\"{() => {removeAlert( i )}}\\\" class=\\\"form-control delete\\\" type=\\\"button\\\">Delete</button>\\n              </div>\\n            </div>\\n          {/each}\\n\\n          <div class=\\\"col-sm-12 col-auto\\\">\\n            <button class=\\\"form-control\\\" on:click={() => addAlert()}>New alert</button>\\n          </div>\\n        </div>\\n        <!-- END ALERTS -->\\n\\n        <h4>Dynamic</h4>\\n        <hr/>\\n\\n        <div class=\\\"dynamicContainer\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-sm-3 col-12\\\">\\n              <svelte:component this={Slider} callback={toggleDynamic} callbackArgs={null} checked={view.dynamic.enabled} />\\n            </div>\\n          </div>\\n          <div class=\\\"row\\\">\\n\\n            <div class=\\\"col-sm-3 col-12\\\">\\n              <label for=\\\"dynamicPID\\\">PID</label>\\n\\n              <select use:pidChange bind:value={view.dynamic.pid} disabled={!view.dynamic.enabled} name=\\\"pid{id}\\\" class=\\\"form-control\\\" id=\\\"dynamicPID\\\" required>\\n                <option value=\\\"\\\">-</option>\\n                {#each pids as pid}\\n                  <option value={pid}>\\n                    {KE_PID[pid].shortName ? KE_PID[pid].shortName : KE_PID[pid].name}\\n                  </option>\\n                {/each}\\n              </select>\\n            </div>\\n\\n            <div class=\\\"col-sm-3 col-12\\\">\\n              <label class=\\\"label\\\" for=\\\"dynamicUnit\\\">Unit</label>\\n              <select name=\\\"units\\\" disabled={!view.dynamic.enabled} on:blur=\\\"{ e => view.dynamic.unit = e.target.value }\\\" value={view.dynamic.unit} class=\\\"form-control value\\\" required><option>-</option></select>\\n            </div>\\n\\n            <div class=\\\"col-sm-3 col-12\\\">\\n              <label for=\\\"dynamicValue\\\">Value</label>\\n              <input bind:value={view.dynamic.value} disabled={!view.dynamic.enabled} class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"dynamicValue\\\"/>\\n            </div>\\n\\n            <div class=\\\"col-sm-3 col-12\\\">\\n              <label for=\\\"dynamicOP\\\">OP</label>\\n              <select bind:value={view.dynamic.op} name=\\\"dynamicOP\\\" disabled={!view.dynamic.enabled} class=\\\"form-control\\\">\\n                <option value=\\\"\\\">-</option>\\n                {#each ['=', '>', '<', '>=', '<='] as op}\\n                  <option value={op}>\\n                    {op}\\n                  </option>\\n                {/each}\\n              </select>\\n            </div>\\n\\n            <div class=\\\"col-sm-3 col-12\\\">\\n              <label for=\\\"dynamicPriority\\\">Priority</label>\\n              <input bind:value={view.dynamic.priority} disabled={!view.dynamic.enabled} class=\\\"form-control\\\" type=\\\"number\\\" name=\\\"dynamicPriority\\\"/>\\n            </div>\\n\\n          </div>\\n        </div>\\n\\n        <hr class=\\\"mb-4\\\">\\n        <button class=\\\"btn btn-primary btn-lg btn-block\\\" type=\\\"submit\\\">Update</button>\\n\\n      </form>\\n    </div>\\n  </div>\\n  {/if}\\n</div>\\n\\n<style>\\n  .basicsContainer {\\n    /* padding: 5px;\\n    border:turquoise;\\n    border-width: 2px;\\n    border-style: solid; */\\n  }\\n\\n  .alertsContainer {\\n    /* padding: 5px;\\n    border:rgb(101, 145, 140);\\n    border-width: 2px;\\n    border-style: solid; */\\n  }\\n\\n  .alertContainer {\\n    padding: 5px;\\n    margin: 5px;\\n    border-radius: 0.5em;\\n    border:grey;\\n    border-width: 1px;\\n    border-style: solid;\\n  }\\n\\n  .dynamicContainer {\\n    /* padding: 5px;\\n    border:rgb(104, 232, 104);\\n    border-width: 2px;\\n    border-style: solid; */\\n  }\\n\\n  .delete {\\n    background-color: rgb(220, 176, 176);\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAyVE,eAAe,eAAC,CAAC,AACf,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CACX,aAAa,CAAE,KAAK,CACpB,OAAO,IAAI,CACX,YAAY,CAAE,GAAG,CACjB,YAAY,CAAE,KAAK,AACrB,CAAC,AASD,OAAO,eAAC,CAAC,AACP,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACtC,CAAC\"}"
};

async function load({ page, context }) {
	return { props: { id: page.params.slug } };
}

const U5Bslugu5D = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $session, $$unsubscribe_session;
	$$unsubscribe_session = subscribe(session, value => $session = value);
	let { id } = $$props;
	let configuration = $session.configuration;
	let view = configuration.views[id];
	const KE_PID = $session.constants.KE_PID;
	const pids = Object.keys(KE_PID);

	function normalizeGauges() {
		if (view) {
			// Ensure we always have 3 entries in our array
			while (view.gauges.length != 3) {
				view.gauges.push({
					"module": "",
					"themeConfig": "",
					"unit": "",
					"path": "",
					"pid": ""
				});
			}
		}
	}

	normalizeGauges();

	function pidChange(node) {
		function getUnits(node) {
			const pid = node.target.value;

			// find our units for the provided pid
			let unitsSelect = node.srcElement.parentElement.nextSibling.nextSibling.querySelectorAll("[name=units]")[0];

			// Clear our old units from units select input
			let i = 0;

			for (i = 0; i < unitsSelect.options.length; i++) {
				unitsSelect.remove(i);
			}

			if (!pid) {
				unitsSelect.options[0] = new Option("-", "", false, false);
				return;
			}

			// Add our units to our select input
			Object.keys(KE_PID[pid].units).forEach((unit, i) => {
				unitsSelect.options[i] = new Option(unit, unit, false, false);
			});

			// Actually set the select value to the first unit
			unitsSelect.value = unitsSelect.options[0].value;

			unitsSelect.focus();
			unitsSelect.blur();
		}

		node.addEventListener("change", getUnits);

		// Set our initial values
		var event = new Event("change");

		node.dispatchEvent(event);

		return {
			destroy() {
				node.removeEventListener("blur", getUnits);
			}
		};
	}

	function handleSubmit(event) {
		// Here we need to sanitize our input :/
		let gauges = [];

		view.gauges.forEach((gauge, i) => {
			if (!gauge.pid || !gauge.unit) {
				return;
			} else {
				gauges.push({
					"module": "Radial",
					"themeConfig": "120",
					"unit": gauge.unit,
					"path": "/" + view.theme + "/",
					"pid": gauge.pid
				});
			}
		});

		// We don't want to mutate view here as we do some gauge [] fanagling
		let temp_view = view;

		temp_view.gauges = gauges;
		configuration.views[id] = temp_view;

		fetch("/api/config", {
			method: "POST",
			body: JSON.stringify(configuration)
		}).then(d => d.json()).then(d => {
			set_store_value(session, $session.configuration = d.config, $session);
			normalizeGauges();

			set_store_value(
				session,
				$session.actions = [
					{
						id: $session.count,
						msg: d.message,
						theme: d.ret ? "alert-info" : "alert-warning"
					},
					...$session.actions
				],
				$session
			);
		});
	}

	function addAlert() {
		view.alerts = [
			...view.alerts,
			{
				"message": "",
				"op": "",
				"priority": "",
				"unit": "",
				"value": ""
			}
		];
	}

	function removeAlert(index) {
		let tempArr = view.alerts;
		tempArr.splice(index, 1);
		view.alerts = tempArr;
	}

	function toggleDynamic() {
		view.dynamic.enabled = view.dynamic.enabled ? false : true;
	}

	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	$$result.css.add(css);
	$$unsubscribe_session();

	return `<div class="${"col-sm-12 col-sm-8 pb-4"}">${view
	? `<div id="${"edit-container"}" class="${"container"}"><div class="${"col-sm-12 order-sm-1"}"><h4 class="${"mb-3"}">Editing view #${escape(id)}</h4>
      <form class="${"needs-validation"}"><input type="${"hidden"}" value="${"<%$id%>"}" name="${"id"}">

          <h4>Basics</h4>
          <hr>

        <div class="${"basicsContainer svelte-19k1p7q"}"><div class="${"row"}"><div class="${"col-12"}"><label for="${"name"}">View name</label>
              <input name="${"name"}" type="${"text"}" class="${"form-control"}" id="${"name"}" placeholder="${""}" required${add_attribute("value", view.name, 1)}></div>

            <div class="${"col-6"}"><label for="${"background"}">Background</label>
              <select name="${"background"}" class="${"custom-select form-control d-block w-100"}" id="${"country"}" required${add_attribute("value", view.background, 1)}><option value="${""}">-</option>${each(["banner1.jpg", "bg.jpg", "BlackBackground.png", "CarbonFiber.png"], background => `<option${add_attribute("value", background, 0)}>${escape(background)}</option>`)}</select></div>

            <div class="${"col-6"}"><label for="${"theme"}">Theme</label>
              <select name="${"theme"}" class="${"form-control d-block w-100"}" id="${"theme"}" required${add_attribute("value", view.theme, 1)}><option value="${""}">-</option>${each(["Stock"], theme => `<option${add_attribute("value", theme, 0)}>${escape(theme)}</option>`)}</select></div>

            <div class="${"col-12"}"><label for="${"theme"}">Vehicle Parameters</label>
              <div class="${"input-group"}">${each(Array(3), (_, i) => `<div class="${"col-4 pl-1 pr-1"}"><div class="${"col-12"}"><select name="${"pid" + escape(id)}" class="${"mb-2 form-control"}" id="${"pid" + escape(id)}"${add_attribute("value", view.gauges[i].pid, 1)}><option value="${""}">-</option>${each(pids, pid => `<option${add_attribute("value", pid, 0)}>${escape(KE_PID[pid].shortName
		? KE_PID[pid].shortName
		: KE_PID[pid].name)}
                          </option>`)}</select></div>

                    
                    <div class="${"col-12"}"><select name="${"units"}"${add_attribute("value", view.gauges[i].unit, 0)} class="${"form-control"}"></select></div>
                  </div>`)}</div></div></div></div>
        

        <h4>Alerts</h4>
        <hr>

        <div class="${"alertsContainer svelte-19k1p7q"}">${each(view.alerts, (alert, i) => `<div class="${"alertContainer svelte-19k1p7q"}"><div class="${"input-group"}"><div class="${"col-sm-6 col-12 pl-1 pr-1"}"><label class="${"label"}" for="${"alertMessage"}">Message</label>
                  <input required class="${"value form-control"}" type="${"text"}" name="${"alertMessage"}"${add_attribute("value", alert.message, 1)}></div>

                <div class="${"col-sm-3 col-12 pl-1 pr-1"}"><label class="${"label"}" for="${"alertValue"}">Value</label>
                  <input required class="${"form-control"}" type="${"text"}" name="${"alertValue"}"${add_attribute("value", alert.value, 1)}></div>

                <div class="${"col-sm-3 col-12 pl-1 pr-1"}"><label for="${"alertOP"}">OP</label>
                  <select required name="${"alertOP"}" class="${"form-control"}"${add_attribute("value", alert.op, 1)}><option value="${""}">-</option>${each(["=", ">", "<", ">=", "<="], op => `<option${add_attribute("value", op, 0)}>${escape(op)}
                    </option>`)}</select></div>

                <div class="${"col-sm-6 col-12 pl-1 pr-1"}"><label class="${"label"}" for="${"alertPID"}">PID</label>

                  <select name="${"pid" + escape(id)}" class="${"value form-control pl-1 pr-1"}" id="${"alertPID"}" required${add_attribute("value", alert.pid, 1)}><option value="${""}">-</option>${each(pids, pid => `<option${add_attribute("value", pid, 0)}>${escape(pid
		? KE_PID[pid].shortName
			? KE_PID[pid].shortName
			: KE_PID[pid].name
		: "")}
                      </option>`)}</select></div>

                <div class="${"col-sm-3 col-12 pl-1 pr-1"}"><label class="${"label"}" for="${"alertUnit"}">Unit</label>
                  <select name="${"units"}"${add_attribute("value", alert.unit, 0)} class="${"form-control value"}" required><option value="${"-"}">-</option></select></div>

                <div class="${"col-sm-3 col-12 pl-1 pr-1"}"><label class="${"label"}" for="${"alertPriority"}">Priority</label>
                  <input required class="${"value form-control"}" type="${"number"}" name="${"alertPriority"}"${add_attribute("value", alert.priority, 1)}>
                </div></div>

              <div class="${"mt-2 text-center"}"><button class="${"form-control delete svelte-19k1p7q"}" type="${"button"}">Delete</button></div>
            </div>`)}

          <div class="${"col-sm-12 col-auto"}"><button class="${"form-control"}">New alert</button></div></div>
        

        <h4>Dynamic</h4>
        <hr>

        <div class="${"dynamicContainer svelte-19k1p7q"}"><div class="${"row"}"><div class="${"col-sm-3 col-12"}">${validate_component(Slider || missing_component, "svelte:component").$$render(
			$$result,
			{
				callback: toggleDynamic,
				callbackArgs: null,
				checked: view.dynamic.enabled
			},
			{},
			{}
		)}</div></div>
          <div class="${"row"}"><div class="${"col-sm-3 col-12"}"><label for="${"dynamicPID"}">PID</label>

              <select ${!view.dynamic.enabled ? "disabled" : ""} name="${"pid" + escape(id)}" class="${"form-control"}" id="${"dynamicPID"}" required${add_attribute("value", view.dynamic.pid, 1)}><option value="${""}">-</option>${each(pids, pid => `<option${add_attribute("value", pid, 0)}>${escape(KE_PID[pid].shortName
		? KE_PID[pid].shortName
		: KE_PID[pid].name)}
                  </option>`)}</select></div>

            <div class="${"col-sm-3 col-12"}"><label class="${"label"}" for="${"dynamicUnit"}">Unit</label>
              <select name="${"units"}" ${!view.dynamic.enabled ? "disabled" : ""}${add_attribute("value", view.dynamic.unit, 0)} class="${"form-control value"}" required><option value="${"-"}">-</option></select></div>

            <div class="${"col-sm-3 col-12"}"><label for="${"dynamicValue"}">Value</label>
              <input ${!view.dynamic.enabled ? "disabled" : ""} class="${"form-control"}" type="${"text"}" name="${"dynamicValue"}"${add_attribute("value", view.dynamic.value, 1)}></div>

            <div class="${"col-sm-3 col-12"}"><label for="${"dynamicOP"}">OP</label>
              <select name="${"dynamicOP"}" ${!view.dynamic.enabled ? "disabled" : ""} class="${"form-control"}"${add_attribute("value", view.dynamic.op, 1)}><option value="${""}">-</option>${each(["=", ">", "<", ">=", "<="], op => `<option${add_attribute("value", op, 0)}>${escape(op)}
                  </option>`)}</select></div>

            <div class="${"col-sm-3 col-12"}"><label for="${"dynamicPriority"}">Priority</label>
              <input ${!view.dynamic.enabled ? "disabled" : ""} class="${"form-control"}" type="${"number"}" name="${"dynamicPriority"}"${add_attribute("value", view.dynamic.priority, 1)}></div></div></div>

        <hr class="${"mb-4"}">
        <button class="${"btn btn-primary btn-lg btn-block"}" type="${"submit"}">Update</button></form></div></div>`
	: ``}
</div>`;
});

export default U5Bslugu5D;
export { load };
//# sourceMappingURL=[slug].svelte.js.map
