import './Notifications.svelte.css.proxy.js';
/* src/components/Notifications.svelte generated by Svelte v3.32.0 */
import {
	create_ssr_component,
	each,
	escape,
	set_store_value,
	subscribe
} from "../_snowpack/pkg/svelte/internal.js";

import { session } from "../_app/assets/runtime/app/stores.js";
import { flip } from "../_snowpack/pkg/svelte/animate.js";
import { fade, fly } from "../_snowpack/pkg/svelte/transition.js";

const css = {
	code: ".notifications.svelte-mlqs8o{width:50%;left:25%;right:25%;z-index:2;position:fixed}.notification.svelte-mlqs8o{position:relative}",
	map: "{\"version\":3,\"file\":\"Notifications.svelte\",\"sources\":[\"Notifications.svelte\"],\"sourcesContent\":[\"{#if $session.actions && $session.actions.length}\\n  <div class=\\\"notifications\\\" id=\\\"notifications\\\">\\n    {#each $session.actions as action(action.id)}\\n      <div\\n        class=\\\"text-center notification alert {action.theme}\\\"\\n        role=\\\"alert\\\"\\n        out:fade\\n        animate:flip={{ duration: 200 }}\\n      >\\n        {action.msg}\\n\\n        <button type=\\\"button\\\" on:click=\\\"{() => remove(action.id)}\\\" class=\\\"float-right close\\\">\\n          <span aria-hidden=\\\"true\\\">&times;</span>\\n        </button>\\n      </div>\\n    {/each}\\n  </div>\\n{/if}\\n\\n<script>\\n  import { session } from \\\"$app/stores\\\";\\n  import { flip } from 'svelte/animate';\\n  import { fade, fly } from 'svelte/transition';\\n\\n  $: {\\n    if ( $session.actions.length ) {\\n      $session.count = $session.count + 1;\\n    }\\n  }\\n\\n  function remove( id ) {\\n    $session.actions = $session.actions.filter(action => action.id != id);\\n  }\\n</script>\\n\\n<style>\\n  .notifications {\\n    width: 50%;\\n    left: 25%;\\n    right: 25%;\\n    z-index: 2;\\n    position: fixed;\\n  }\\n\\n  .notification {\\n    position: relative;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAoCE,cAAc,cAAC,CAAC,AACd,KAAK,CAAE,GAAG,CACV,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,GAAG,CACV,OAAO,CAAE,CAAC,CACV,QAAQ,CAAE,KAAK,AACjB,CAAC,AAED,aAAa,cAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,AACpB,CAAC\"}"
};

const Notifications = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $session, $$unsubscribe_session;
	$$unsubscribe_session = subscribe(session, value => $session = value);
	session.subscribe($$value => $session = $$value);

	function remove(id) {
		set_store_value(session, $session.actions = $session.actions.filter(action => action.id != id), $session);
	}

	$$result.css.add(css);

	$: {
		{
			if ($session.actions.length) {
				set_store_value(session, $session.count = $session.count + 1, $session);
			}
		}
	}

	$$unsubscribe_session();

	return `${$session.actions && $session.actions.length
	? `<div class="${"notifications svelte-mlqs8o"}" id="${"notifications"}">${each($session.actions, action => `<div class="${"text-center notification alert " + escape(action.theme) + " svelte-mlqs8o"}" role="${"alert"}">${escape(action.msg)}

        <button type="${"button"}" class="${"float-right close"}"><span aria-hidden="${"true"}">Ã—</span></button>
      </div>`)}</div>`
	: ``}`;
});

export default Notifications;
//# sourceMappingURL=Notifications.svelte.js.map
